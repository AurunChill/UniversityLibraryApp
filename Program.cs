using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using LibraryApp.Data;
using LibraryApp.Data.Models;
using LibraryApp.UI.Forms;
using Microsoft.EntityFrameworkCore;

namespace LibraryApp;

internal static class Program
{
    private static IHost CreateHost(string[] args)
    {
        var builder = Host.CreateApplicationBuilder(args);

        string dbPath = Path.Combine(
            AppDomain.CurrentDomain.BaseDirectory,
            "AppData",
            args.Length > 0 && args[0] == "--test" ? "library_test.db" : "library.db"
        );

        /* üëâ –≤–º–µ—Å—Ç–æ AddSqlite –∏—Å–ø–æ–ª—å–∑—É–µ–º AddDbContextFactory
            (–∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Å—Ç–∞—ë—Ç—Å—è —Ç–µ–º –∂–µ, –ø—Ä–æ—Å—Ç–æ –ø–æ–ª—É—á–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É) */
        builder.Services.AddDbContextFactory<LibraryContext>(opt =>
            opt.UseSqlite($"Data Source={dbPath}"));

        builder.Services.AddScoped<MainForm>();
        return builder.Build();
    }

    [STAThread]
    public static void Main(string[] args)
    {
        ApplicationConfiguration.Initialize();

        using IHost host = CreateHost(args);

        // –¥–∞—ë–º Books –¥–æ—Å—Ç—É–ø –∫ —Ç–æ–π –∂–µ —Ñ–∞–±—Ä–∏–∫–µ, —á—Ç–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ DI
        var factory = host.Services.GetRequiredService<IDbContextFactory<LibraryContext>>();
        Books.Init(factory);
        Supplies.Factory  = factory;
        ReaderTickets.Init(factory);
        Debtors.Init(factory);

        DatabaseInitializer.EnsureCreated(
            args.Length > 0 && args[0] == "--test" ? "library_test.db" : "library.db");

        Application.Run(host.Services.GetRequiredService<MainForm>());
    }
}